amcl:
  ros__parameters:
    use_sim_time: True  # 是否使用仿真时间，用于在仿真环境下运行
    alpha1: 0.2  # 运动模型的噪声参数，控制角速度对位移的影响，值越大表示噪声越大
    alpha2: 0.2  # 运动模型的噪声参数，控制直线速度对位移的影响，值越大表示噪声越大
    alpha3: 0.2  # 运动模型的噪声参数，控制角速度对角速度的影响，值越大表示噪声越大
    alpha4: 0.2  # 运动模型的噪声参数，控制直线速度对角速度的影响，值越大表示噪声越大
    alpha5: 0.2  # 运动模型的噪声参数，控制运动模型的随机噪声，值越大表示噪声越大
    base_frame_id: "base_footprint"  # 机器人基础坐标系的ID，用于表示机器人的物理框架
    beam_skip_distance: 0.5  # 激光束跳过的距离阈值，如果激光束的测量值超过此距离则跳过该束
    beam_skip_error_threshold: 0.9  # 激光束跳过的错误阈值，表示允许跳过的激光束占总束数的比例
    beam_skip_threshold: 0.3  # 激光束跳过的比例阈值，表示跳过激光束的比例
    do_beamskip: false  # 是否启用激光束跳过机制，减少计算量
    global_frame_id: "map"  # 全局坐标系的ID，用于表示地图的坐标系
    lambda_short: 0.1  # 短程传感器模型参数，用于模拟较短的障碍物
    laser_likelihood_max_dist: 2.0  # 激光最大似然距离，超过此距离的测量值将被忽略
    laser_max_range: 20.0  # 激光最大测量范围，超过此范围的测量值将被忽略（降低为20.0米以减小计算负担）
    laser_min_range: 0.1  # 激光最小测量范围，小于此范围的测量值将被忽略
    laser_model_type: "likelihood_field"  # 激光传感器模型类型，使用似然场模型
    max_beams: 30  # 使用的最大激光束数，减少计算量
    max_particles: 1000  # 粒子滤波器中的最大粒子数，减少计算量
    min_particles: 300  # 粒子滤波器中的最小粒子数，降低最小粒子数以减小负载
    odom_frame_id: "odom"  # 里程计坐标系的ID，用于表示机器人的运动坐标系
    pf_err: 0.05  # 粒子滤波器的错误阈值，用于调整粒子的重新采样
    pf_z: 0.99  # 粒子滤波器的置信度阈值，用于粒子的权重更新
    recovery_alpha_fast: 0.0  # 快速恢复模式下的alpha参数，用于调整粒子权重
    recovery_alpha_slow: 0.0  # 慢速恢复模式下的alpha参数，用于调整粒子权重
    resample_interval: 1  # 重采样的间隔，每多少次更新进行一次重采样
    robot_model_type: "nav2_amcl::DifferentialMotionModel"  # 机器人运动模型类型，使用差分驱动模型
    save_pose_rate: 2.0  # 保存机器人位姿的频率（秒），增加保存频率以适应低计算能力
    sigma_hit: 0.2  # 命中模型的标准差，用于计算似然
    tf_broadcast: true  # 是否广播tf变换，用于发布位姿变换
    transform_tolerance: 0.5  # 变换容忍度（秒），降低容忍度以减少处理延迟
    update_min_a: 0.2  # 最小角度更新阈值，超过此角度才更新位姿
    update_min_d: 0.2  # 最小距离更新阈值，超过此距离才更新位姿
    z_hit: 0.5  # 命中模型的比例，用于计算似然
    z_max: 0.05  # 最大距离模型的比例，用于计算似然
    z_rand: 0.5  # 随机模型的比例，用于计算似然
    z_short: 0.05  # 短程模型的比例，用于计算似然
    scan_topic: scan  # 激光扫描话题名称，用于获取激光雷达数据

controller_server:
  ros__parameters:
    use_sim_time: True  # 是否使用仿真时间，用于在仿真环境下运行
    controller_frequency: 5.0  # 降低控制器运行频率为10Hz，减轻计算负担
    min_x_velocity_threshold: 0.001  # 最小X方向速度阈值（米/秒），低于此值视为停止
    min_y_velocity_threshold: 0.0  # 最小Y方向速度阈值（米/秒），低于此值视为停止
    min_theta_velocity_threshold: 0.001  # 最小角速度阈值（弧度/秒），低于此值视为停止
    failure_tolerance: 0.3  # 控制器允许的失败比例，用于处理控制失败
    progress_checker_plugin: "progress_checker"  # 进度检查插件，用于检测机器人是否在前进
    goal_checker_plugins: ["general_goal_checker"]  # 目标检查插件列表，用于检查机器人是否到达目标
    controller_plugins: ["FollowPath"]  # 控制器插件列表，用于路径跟随

    # 进度检查器参数
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"  # 简单进度检查器插件，用于检测机器人是否在前进
      required_movement_radius: 0.2  # 减少最小半径，以适应较小的移动量
      movement_time_allowance: 20.0  # 增加允许移动时间，避免频繁的重启

    # 目标检查器参数
    general_goal_checker:
      stateful: True  # 是否有状态，用于保持目标检查的状态
      plugin: "nav2_controller::SimpleGoalChecker"  # 简单目标检查器插件，用于检测机器人是否到达目标
      xy_goal_tolerance: 0.25  # XY方向目标容忍度（米），机器人到达目标的距离容忍度
      yaw_goal_tolerance: 0.25  # 偏航角目标容忍度（弧度），机器人到达目标的角度容忍度

    # DWB控制器参数
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"  # DWB本地规划器插件，用于路径跟随
      debug_trajectory_details: False  # 关闭轨迹调试信息，减少处理负载
      min_vel_x: 0.0  # 最小X方向速度（米/秒），低于此值视为停止
      min_vel_y: 0.0  # 最小Y方向速度（米/秒），低于此值视为停止
      max_vel_x: 0.15  # 限制X方向的最大速度为0.15米/秒
      max_vel_y: 0.0  # 限制Y方向的最大速度为0.0米/秒（忽略侧向运动）
      max_vel_theta: 0.05  # 限制Z方向的最大角速度为0.05弧度/秒
      min_speed_xy: 0.0  # 最小XY速度（米/秒），低于此值视为停止
      max_speed_xy: 0.15  # 最大XY速度（米/秒），限制机器人最高速度
      min_speed_theta: 0.0  # 最小角速度（弧度/秒），低于此值视为停止
      acc_lim_x: 0.1  # 进一步降低X方向加速度限制为0.2米/秒²，降低初始加速度
      acc_lim_y: 0.0  # Y方向加速度限制（米/秒²），忽略侧向运动
      acc_lim_theta: 0.01  # 进一步降低角加速度限制为0.2弧度/秒²，降低初始加速度
      decel_lim_x: -0.2  # 进一步降低X方向减速度限制为-0.2米/秒²
      decel_lim_y: 0.0  # Y方向减速度限制（米/秒²），忽略侧向运动
      decel_lim_theta: -0.2  # 进一步降低角减速度限制为-0.2弧度/秒²
      vx_samples: 10  # X方向速度样本数，减少样本数以降低计算负担
      vy_samples: 1  # Y方向速度样本数，仅保留一个样本，忽略侧向运动
      vtheta_samples: 10  # 角速度样本数，减少样本数以降低计算负担
      sim_time: 1.5  # 降低仿真时间以减少计算负担
      linear_granularity: 0.1  # 增加线性粒度以减少计算负担
      angular_granularity: 0.1  # 增加角度粒度以减少计算负担
      transform_tolerance: 0.5  # 增加容忍度以减少处理延迟
      xy_goal_tolerance: 0.25  # XY方向目标容忍度（米），机器人到达目标的距离容忍度
      trans_stopped_velocity: 0.01  # 降低停止速度，以确保机器人彻底停止
      short_circuit_trajectory_evaluation: True  # 是否短路轨迹评估，加快评估速度
      stateful: True  # 是否有状态，用于保持路径跟随的状态
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]  # 评价标准列表，用于评估轨迹
      BaseObstacle.scale: 0.02  # 基础障碍物评分权重，用于障碍物避让
      PathAlign.scale: 16.0  # 降低路径对齐评分权重，减轻计算负担
      PathAlign.forward_point_distance: 0.2  # 增加前进点距离，减少计算负担
      GoalAlign.scale: 12.0  # 降低目标对齐评分权重，减轻计算负担
      GoalAlign.forward_point_distance: 0.2  # 增加前进点距离，减少计算负担
      PathDist.scale: 16.0  # 降低路径距离评分权重，减轻计算负担
      GoalDist.scale: 12.0  # 降低目标距离评分权重，减轻计算负担
      RotateToGoal.scale: 16.0  # 降低旋转到目标评分权重，减轻计算负担
      RotateToGoal.slowing_factor: 5.0  # 旋转到目标减速因子，用于控制速度
      RotateToGoal.lookahead_time: -1.0  # 旋转到目标前瞻时间（秒），用于路径规划

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0  # 更新频率（Hz），控制代价地图的更新频率
      publish_frequency: 2.0  # 发布频率（Hz），控制代价地图的发布频率
      global_frame: odom  # 全局坐标系，用于表示机器人的运动坐标系
      robot_base_frame: base_link  # 机器人基础坐标系，用于表示机器人的物理框架
      use_sim_time: True  # 是否使用仿真时间，用于在仿真环境下运行
      rolling_window: true  # 是否使用滚动窗口，用于动态更新代价地图
      width: 3  # 代价地图宽度（米），控制地图的范围
      height: 3  # 代价地图高度（米），控制地图的范围
      resolution: 0.1  # 降低代价地图分辨率为0.1米/像素，减少计算负担
      robot_radius: 0.22  # 机器人半径（米），用于设置机器人的大小
      plugins: ["voxel_layer", "inflation_layer"]  # 插件列表，用于加载不同的代价地图层
      filters: ["keepout_filter"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 膨胀层插件，用于在障碍物周围创建安全区域
        cost_scaling_factor: 2.0  # 降低代价缩放因子以减少膨胀计算
        inflation_radius: 0.4  # 减少膨胀半径，降低计算负担
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"  # 体素层插件，用于处理三维障碍物
        enabled: True  # 是否启用体素层
        publish_voxel_map: False  # 禁止发布体素地图，减少网络带宽
        origin_z: 0.0  # 体素层原点Z坐标（米）
        z_resolution: 0.1  # 降低体素层Z方向分辨率，减少计算负担
        z_voxels: 8  # 减少体素层Z方向体素数量，降低计算负担
        max_obstacle_height: 1.0  # 降低最大障碍物高度，减少不必要的计算
        mark_threshold: 0  # 标记阈值
        observation_sources: scan  # 观测源列表
        scan:
          topic: /scan  # 激光扫描话题
          max_obstacle_height: 1.0  # 降低最大障碍物高度（米），减少计算量
          clearing: True  # 是否清除障碍物
          marking: True  # 是否标记障碍物
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 2.0  # 降低射线追踪最大范围，减少计算负担
          raytrace_min_range: 0.0  # 射线追踪最小范围（米）
          obstacle_max_range: 1.5  # 降低障碍物最大检测范围，减少计算负担
          obstacle_min_range: 0.0  # 障碍物最小检测范围（米）
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"  # 静态层插件，用于加载静态地图
        map_subscribe_transient_local: True  # 地图订阅暂态本地
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        enabled: True
        filter_info_topic: "/costmap_filter_info"
      always_send_full_costmap: False  # 不总是发送完整的代价地图，减少网络带宽

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 0.5  # 降低更新频率为0.5Hz，减少计算负担
      publish_frequency: 0.5  # 降低发布频率为0.5Hz，减少计算负担
      global_frame: map  # 全局坐标系，用于表示地图的坐标系
      robot_base_frame: base_link  # 机器人基础坐标系，用于表示机器人的物理框架
      use_sim_time: True  # 是否使用仿真时间，用于在仿真环境下运行
      robot_radius: 0.22  # 机器人半径（米），用于设置机器人的大小
      resolution: 0.1  # 降低代价地图分辨率为0.1米/像素，减少计算负担
      track_unknown_space: true  # 是否跟踪未知空间，用于处理未知区域
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]  # 插件列表，用于加载不同的代价地图层
      filters: ["keepout_filter"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"  # 障碍物层插件，用于处理动态障碍物
        enabled: True  # 是否启用障碍物层
        observation_sources: scan  # 观测源列表
        scan:
          topic: /scan  # 激光扫描话题
          max_obstacle_height: 1.0  # 降低最大障碍物高度（米），减少计算量
          clearing: True  # 是否清除障碍物
          marking: True  # 是否标记障碍物
          data_type: "LaserScan"  # 数据类型
          raytrace_max_range: 2.0  # 降低射线追踪最大范围，减少计算负担
          raytrace_min_range: 0.0  # 射线追踪最小范围（米）
          obstacle_max_range: 1.5  # 降低障碍物最大检测范围，减少计算负担
          obstacle_min_range: 0.0  # 障碍物最小检测范围（米）
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"  # 静态层插件，用于加载静态地图
        map_subscribe_transient_local: True  # 地图订阅暂态本地
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"  # 膨胀层插件，用于在障碍物周围创建安全区域
        cost_scaling_factor: 2.0  # 降低代价缩放因子以减少膨胀计算
        inflation_radius: 0.4  # 减少膨胀半径，降低计算负担
      keepout_filter:
        plugin: "nav2_costmap_2d::KeepoutFilter"
        enabled: True
        filter_info_topic: "/costmap_filter_info"
      always_send_full_costmap: False  # 不总是发送完整的代价地图，减少网络带宽

velocity_smoother:
  ros__parameters:
    use_sim_time: True  # 是否使用仿真时间，用于在仿真环境下运行
    smoothing_frequency: 10.0  # 降低平滑频率为10Hz，减少计算负担
    scale_velocities: False  # 是否缩放速度，用于速度控制
    feedback: "OPEN_LOOP"  # 反馈类型，用于速度控制
    max_velocity: [0.15, 0.0, 0.05]  # 最大速度，限制X方向最大速度为0.15米/秒，Z方向最大角速度为0.05弧度/秒
    min_velocity: [-0.15, 0.0, -0.05]  # 最小速度，同样限制反方向的最小速度
    max_accel: [0.2, 0.0, 0.2]  # 进一步降低最大加速度为0.2米/秒²和0.2弧度/秒²
    max_decel: [-0.2, 0.0, -0.2]  # 进一步降低最大减速度为-0.2米/秒²和-0.2弧度/秒²
    odom_topic: "odom"  # 里程计话题，用于获取机器人的运动信息
    odom_duration: 0.1  # 里程计持续时间（秒），决定里程计数据的有效时间
    deadband_velocity: [0.0, 0.0, 0.0]  # 死区速度，用于滤除微小速度变化
    velocity_timeout: 1.0  # 速度超时时间（秒），用于处理速度控制超时
